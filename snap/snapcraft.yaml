%YAML 1.1
---
# Snapcraft Recipe for git filter-repo
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

# All following comments, including this one, are designed to be stripped
# before contributing the recipe to the upstream

# git filter-repo, git-filter-repo, git-filter-repo-launch
# are placeholders text meant to be replaced by appropriate content
name: git-filter-repo
title: git filter-repo (UNOFFICIAL)
summary: Versatile tool for rewriting history of Git repositories
description: |
  git filter-repo is a versatile tool for rewriting history, which
  includes [capabilities I have not found anywhere else](https://github.com/newren/git-filter-repo#design-rationale-behind-filter-repo).
  It roughly falls into the same space of tool as [git filter-branch](https://git-scm.com/docs/git-filter-branch)
  but without the capitulation-inducing poor [performance](https://public-inbox.org/git/CABPp-BGOz8nks0+Tdw5GyGqxeYR-3FF6FT5JcgVqZDYVRQ6qog@mail.gmail.com/),
  with far more capabilities, and with a design that scales
  usability-wise beyond trivial rewriting cases. [git filter-repo is now recommended by the git project](https://git-scm.com/docs/git-filter-branch#_warning)
  instead of git filter-branch.

  While most users will probably just use filter-repo as a simple
  command line tool (and likely only use a few of its flags), at its
  core filter-repo contains a library for creating history rewriting
  tools. As such, users with specialized needs can leverage it to
  quickly create [entirely new history rewriting tools](https://github.com/newren/git-filter-repo/blob/main/contrib/filter-repo-demos).

  **Snap-specific information**

  This is NOT an official distribution of git filter-repo, refer the
  snap's own issue tracker for support:

  https://github.com/Lin-Buo-Ren/git-filter-repo-snap/issues

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/placeholder.png

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: MIT

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: Derived from the part specified by the `adopt-info` property

# Extract metadata from the main snap part
# https://forum.snapcraft.io/t/extracting-information-from-sources-in-snapcraft-parts/4642
adopt-info: main

# Snapd feature set and version the snap requires in order to work
# https://forum.snapcraft.io/t/snapcraft-top-level-metadata/8334#heading--assumes
assumes:
  - command-chain

# Base runtime
# The common runtime for the snap to run on, or `bare` for static linked applications
# https://docs.snapcraft.io/snapcraft-top-level-metadata/8334#heading--base
base: core18

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: strict

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: stable

# DISABLED: Not supported by Snapcraft Build Service yet
# package-repositories:
#  - type: apt
#    ppa: git-core/ppa

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Files to patch the files in the snap
  # patching:
  #   source: snap/local/patching
  #   plugin: dump
  #   organize:
  #     '*': patching/
  #   prime:
  #     - -*

  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
      - -bin/README.*

  # Programs to modify the behavior of each step of the snapcraft lifecycles
  # scriptlets:
  #   source: snap/local/scriptlets
  #   plugin: dump
  #   organize:
  #     '*': scriptlets/
  #   prime:
  #     - -*

  # Stage snap for fixing the Glibc locales
  # https://forum.snapcraft.io/t/the-locales-launch-stage-snap/10296
  # locales-launch:
  #   source: https://github.com/Lin-Buo-Ren/locales-launch.git
  #   source-tag: v1.0.0
  #   plugin: dump
  #   stage-packages:
  #     - libc-bin
  #     - locales
  #   stage:
  #     - bin/locales-launch
  #     - etc/locale.alias
  #     - usr/bin/localedef
  #     - usr/share/doc/locales
  #     - usr/share/i18n
  #     - usr/share/locale

  # Check out the tagged release revision if it isn't promoted to the stable channel
  # https://forum.snapcraft.io/t/selective-checkout-check-out-the-tagged-release-revision-if-it-isnt-promoted-to-the-stable-channel/10617
  selective-checkout:
    source: https://github.com/Lin-Buo-Ren/selective-checkout.git
    source-tag: v2.0.2
    plugin: dump
    build-packages:
      # Scriptlet dependencies
      - curl
      - jq
      - sed

      # Uncomment the VCS your main part is using
      #- git
      #- mercurial
      #- subversion
    stage:
      - scriptlets/selective-checkout
    prime:
      - -*

  main:
    after:
      # for patch-desktop-entries.*
      #- patching

      # For the selective-checkout scriptlet
      - selective-checkout

    source: https://github.com/newren/git-filter-repo.git
    override-pull: |
      set -o nounset

      snapcraftctl pull

      "${SNAPCRAFT_STAGE}"/scriptlets/selective-checkout \
        --append-packaging-revision

    plugin: dump
    organize:
      git-filter-repo: bin/
      contrib/filter-repo-demos/bfg-ish: bin/
    stage:
      - bin/*
    override-prime: |
      snapcraftctl prime
      ln -sf git-filter-repo "${SNAPCRAFT_PRIME}"/bin/git_filter_repo.py

  git-stable-ppa:
    plugin: nil
    build-packages:
      - software-properties-common
    override-pull: |
      sudo add-apt-repository \
        --yes \
        ppa:git-core/ppa
      sudo apt update

  git:
    after:
      - git-stable-ppa
    plugin: nil
    stage-packages:
      - git

  # The git-launch launcher: Fix Git functionality in the snap runtime environment
  # https://forum.snapcraft.io/t/the-git-launch-launcher-fix-git-functionality-in-the-snap-runtime-environment/11742
  git-launch:
    source: https://github.com/Lin-Buo-Ren/git-launch.git
    source-tag: v1.0.0
    plugin: dump
    stage:
      - bin/*

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  git-filter-repo:
    # The adapter to set up runtime environment at the launch of the snap
    # NOTE: The `command-chain` property is only supported by the `full` adapter
    adapter: full

    # An *relative path* to an executable file root from the `prime` directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    # WORKAROUND: LP Bug #1820055
    #command: bin/git-filter-repo-launch
    command: git-filter-repo

    # The commands that are run, in order, before running the one specified by the `command` key
    command-chain:
      - bin/git-launch
      - bin/snap-maintenance-launch

    environment:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8

  bfg-ish:
    # The adapter to set up runtime environment at the launch of the snap
    # NOTE: The `command-chain` property is only supported by the `full` adapter
    adapter: full

    # An *relative path* to an executable file root from the `prime` directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: bfg-ish

    # The commands that are run, in order, before running the one specified by the `command` key
    command-chain:
      - bin/git-launch
      - bin/snap-maintenance-launch

    environment:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8

# Refer the following documentation for asserting interface plugs and slots in a security confined snap:
# Interface management - doc - snapcraft.io
# https://docs.snapcraft.io/interface-management/6154
# Supported interfaces - doc - snapcraft.io
# https://docs.snapcraft.io/supported-interfaces/7744
# Non-A/C: Non-autoconnect interface
plugs:
  # Regular files access
  home:
  removable-media: # Non-A/C

#slots:
